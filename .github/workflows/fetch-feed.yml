name: Fetch and Clean RSS Feed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install lxml requests beautifulsoup4
      
      - name: Fetch and Clean RSS Feed
        run: |
          python3 << 'EOF'
          import requests
          from lxml import etree
          from datetime import datetime
          import re

          # Fetch the original feed
          print("Fetching original feed...")
          response = requests.get('https://www.cabletv.com/feed')
          
          # Parse the XML
          root = etree.fromstring(response.content)
          
          # Get the channel element
          channel = root.find('channel')
          
          # Define namespace map
          nsmap = {
              'content': 'http://purl.org/rss/1.0/modules/content/',
              'wfw': 'http://wellformedweb.org/CommentAPI/',
              'dc': 'http://purl.org/dc/elements/1.1/',
              'atom': 'http://www.w3.org/2005/Atom',
              'sy': 'http://purl.org/rss/1.0/modules/syndication/',
              'slash': 'http://purl.org/rss/1.0/modules/slash/',
              'media': 'http://search.yahoo.com/mrss/',
              'snf': 'http://www.smartnews.be/snf'
          }
          
          # Register all namespaces
          for prefix, uri in nsmap.items():
              etree.register_namespace(prefix, uri)
          
          # Create new RSS document
          new_rss = etree.Element('rss', version='2.0', nsmap=nsmap)
          new_channel = etree.SubElement(new_rss, 'channel')
          
          # Copy channel metadata
          for elem in channel:
              if elem.tag == 'item':
                  break
              if 'logo' not in elem.tag.lower():  # Skip any existing logo
                  new_channel.append(elem)
          
          # Add SNF logo right after the channel description
          snf_logo = etree.SubElement(new_channel, '{http://www.smartnews.be/snf}logo')
          snf_logo.text = 'https://i.ibb.co/Y6Z731Z/RSS-Logo-Header.png'
          
          # Process items
          items = channel.findall('item')
          print(f"Processing {len(items)} items...")
          
          for old_item in items:
              new_item = etree.SubElement(new_channel, 'item')
              
              # Track if we found content:encoded
              found_content_encoded = False
              content_text = None
              
              # Copy all elements from old item
              for elem in old_item:
                  tag_name = etree.QName(elem.tag).localname
                  namespace = etree.QName(elem.tag).namespace
                  
                  # Handle content:encoded specially
                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      found_content_encoded = True
                      content_text = elem.text
                      
                      # Create new content:encoded with proper CDATA
                      new_content = etree.SubElement(new_item, '{http://purl.org/rss/1.0/modules/content/}encoded')
                      # Don't set text directly, we'll write CDATA manually later
                      new_content.text = content_text
                      
                      # Extract and add thumbnail
                      if content_text:
                          img_match = re.search(r'<img[^>]+src=["\']([^"\']+)["\']', content_text)
                          if img_match:
                              img_url = img_match.group(1)
                              thumbnail = etree.SubElement(new_item, '{http://search.yahoo.com/mrss/}thumbnail')
                              thumbnail.set('url', img_url)
                  else:
                      # Copy other elements as-is
                      new_elem = etree.SubElement(new_item, elem.tag, elem.attrib)
                      new_elem.text = elem.text
                      new_elem.tail = elem.tail
                      for child in elem:
                          new_elem.append(child)
              
              # Ensure required fields exist
              if new_item.find('dc:creator', nsmap) is None:
                  creator = etree.SubElement(new_item, '{http://purl.org/dc/elements/1.1/}creator')
                  creator.text = 'CableTV.com'
              
              if new_item.find('pubDate') is None:
                  pubdate = etree.SubElement(new_item, 'pubDate')
                  pubdate.text = datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S +0000')
              
              if new_item.find('description') is None and content_text:
                  description = etree.SubElement(new_item, 'description')
                  text_content = re.sub(r'<[^>]+>', '', content_text)
                  description.text = text_content.strip()[:200] + '...'
          
          # Convert to string with proper CDATA handling
          xml_string = etree.tostring(new_rss, 
                                      pretty_print=True, 
                                      xml_declaration=True, 
                                      encoding='UTF-8',
                                      method='xml')
          
          # Manually ensure CDATA sections are properly formatted
          xml_string = xml_string.decode('utf-8')
          
          # Fix content:encoded to use CDATA if it doesn't already
          xml_string = re.sub(
              r'<content:encoded>(.*?)</content:encoded>',
              lambda m: f'<content:encoded><![CDATA[{m.group(1)}]]></content:encoded>',
              xml_string,
              flags=re.DOTALL
          )
          
          # Fix atom:link self-reference
          xml_string = xml_string.replace(
              'https://www.cabletv.com/feed',
              'https://ctv-clearlink.github.io/RSS-Feed/feed.xml'
          )
          
          # Write to file
          with open('feed.xml', 'w', encoding='utf-8') as f:
              f.write(xml_string)
          
          print("Feed cleaned successfully!")
          print(f"Logo added: https://i.ibb.co/Y6Z731Z/RSS-Logo-Header.png")
          EOF
      
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet feed.xml || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push feed
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add feed.xml
          git commit -m "Update RSS feed $(date '+%Y-%m-%d %H:%M:%S')"
          git pull --rebase origin main
          git push origin main
