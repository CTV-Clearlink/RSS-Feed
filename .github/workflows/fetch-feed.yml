name: Fetch and Clean RSS Feed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install lxml requests beautifulsoup4
      
      - name: Fetch and Clean RSS Feed
        run: |
          python3 << 'EOF'
          import requests
          from lxml import etree
          from bs4 import BeautifulSoup
          from datetime import datetime
          import re
          from urllib.parse import quote, urljoin

          # Fetch the original feed
          print("Fetching original feed...")
          response = requests.get('https://www.cabletv.com/feed')
          print(f"Fetched {len(response.content)} bytes")
          
          # Parse the XML
          root = etree.fromstring(response.content)
          channel = root.find('channel')
          
          # Get all items and limit to 8
          items = channel.findall('item')[:8]
          print(f"Processing {len(items)} items")
          
          # Define namespace map
          nsmap = {
              'content': 'http://purl.org/rss/1.0/modules/content/',
              'wfw': 'http://wellformedweb.org/CommentAPI/',
              'dc': 'http://purl.org/dc/elements/1.1/',
              'atom': 'http://www.w3.org/2005/Atom',
              'sy': 'http://purl.org/rss/1.0/modules/syndication/',
              'slash': 'http://purl.org/rss/1.0/modules/slash/',
              'media': 'http://search.yahoo.com/mrss/',
              'snf': 'http://www.smartnews.be/snf'
          }
          
          # Register all namespaces
          for prefix, uri in nsmap.items():
              etree.register_namespace(prefix, uri)
          
          # Build the XML as a string manually
          xml_parts = []
          xml_parts.append('<?xml version="1.0" encoding="UTF-8"?>')
          xml_parts.append('<rss version="2.0"')
          xml_parts.append(' xmlns:content="http://purl.org/rss/1.0/modules/content/"')
          xml_parts.append(' xmlns:wfw="http://wellformedweb.org/CommentAPI/"')
          xml_parts.append(' xmlns:dc="http://purl.org/dc/elements/1.1/"')
          xml_parts.append(' xmlns:atom="http://www.w3.org/2005/Atom"')
          xml_parts.append(' xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"')
          xml_parts.append(' xmlns:slash="http://purl.org/rss/1.0/modules/slash/"')
          xml_parts.append(' xmlns:media="http://search.yahoo.com/mrss/"')
          xml_parts.append(' xmlns:snf="http://www.smartnews.be/snf">')
          xml_parts.append('<channel>')
          
          # Add channel metadata
          for elem in channel:
              if elem.tag == 'item':
                  break
              tag = elem.tag
              if 'logo' in tag.lower():
                  continue
              
              elem_str = etree.tostring(elem, encoding='unicode', method='xml')
              xml_parts.append(elem_str)
              
              # Add logo after description
              if elem.tag == 'description':
                  logo_filename = 'CableTV.com RSS Logo Header.png'
                  logo_url = f'https://ctv-clearlink.github.io/RSS-Feed/{quote(logo_filename)}'
                  xml_parts.append(f'<snf:logo><url>{logo_url}</url></snf:logo>')
                  print("✓ Added logo")
          
          # Process each item
          cdata_count = 0
          thumbnail_count = 0
          
          for idx, item in enumerate(items):
              xml_parts.append('<item>')
              
              content_html = None
              
              # First pass - collect all elements and find content
              for elem in item:
                  tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                  namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None
                  
                  # Capture content:encoded for thumbnail extraction
                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      content_html = elem.text or ''
                  
                  # Skip existing media:thumbnail - we'll add our own
                  if namespace == 'http://search.yahoo.com/mrss/' and tag_name == 'thumbnail':
                      continue
                  
                  # Handle content:encoded with CDATA
                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      if content_html:
                          # Clean up links
                          soup = BeautifulSoup(content_html, 'html.parser')
                          links = soup.find_all('a')
                          if len(links) > 3:
                              for link in links[3:]:
                                  link.unwrap()
                          content_html = str(soup)
                          
                          # Add with CDATA
                          xml_parts.append(f'<content:encoded><![CDATA[{content_html}]]></content:encoded>')
                          cdata_count += 1
                  else:
                      # Serialize other elements normally
                      elem_str = etree.tostring(elem, encoding='unicode', method='xml')
                      xml_parts.append(elem_str)
              
              # Extract and add thumbnail - try very hard to find an image
              img_url = None
              
              if content_html:
                  print(f"\nItem {idx + 1} - Looking for thumbnail...")
                  
                  # Parse HTML
                  soup = BeautifulSoup(content_html, 'html.parser')
                  
                  # Method 1: Find first img tag
                  img_tag = soup.find('img')
                  if img_tag:
                      img_url = img_tag.get('src') or img_tag.get('data-src') or img_tag.get('data-lazy-src')
                      if img_url:
                          print(f"  Found via img tag: {img_url[:60]}...")
                  
                  # Method 2: Regex search for any image URL
                  if not img_url:
                      patterns = [
                          r'src=["\']([^"\']+\.(?:jpg|jpeg|png|gif|webp)[^"\']*)["\']',
                          r'data-src=["\']([^"\']+\.(?:jpg|jpeg|png|gif|webp)[^"\']*)["\']',
                          r'(https?://[^\s<>"]+\.(?:jpg|jpeg|png|gif|webp))',
                      ]
                      for pattern in patterns:
                          match = re.search(pattern, content_html, re.IGNORECASE)
                          if match:
                              img_url = match.group(1)
                              print(f"  Found via regex: {img_url[:60]}...")
                              break
                  
                  # Clean and normalize the URL
                  if img_url:
                      img_url = img_url.strip()
                      # Remove any query parameters that might break the URL
                      if '?' in img_url:
                          img_url = img_url.split('?')[0]
                      
                      # Make absolute URL
                      if img_url.startswith('//'):
                          img_url = 'https:' + img_url
                      elif img_url.startswith('/'):
                          img_url = 'https://www.cabletv.com' + img_url
                      elif not img_url.startswith('http'):
                          img_url = 'https://www.cabletv.com/' + img_url
                      
                      # Escape XML special characters in URL
                      img_url = img_url.replace('&', '&amp;')
                      
                      xml_parts.append(f'<media:thumbnail url="{img_url}"/>')
                      thumbnail_count += 1
                      print(f"  ✓ Added thumbnail: {img_url[:60]}...")
                  else:
                      print(f"  ✗ No thumbnail found")
              
              # Ensure required fields
              if not item.find('dc:creator', nsmap):
                  xml_parts.append('<dc:creator>CableTV.com</dc:creator>')
              
              if not item.find('pubDate'):
                  pubdate = datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S +0000')
                  xml_parts.append(f'<pubDate>{pubdate}</pubDate>')
              
              if not item.find('description') and content_html:
                  text = re.sub(r'<[^>]+>', '', content_html)
                  text = text.strip()[:200] + '...'
                  text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                  xml_parts.append(f'<description>{text}</description>')
              
              xml_parts.append('</item>')
          
          xml_parts.append('</channel>')
          xml_parts.append('</rss>')
          
          # Join all parts
          xml_string = ''.join(xml_parts)
          
          # Fix self-reference
          xml_string = xml_string.replace(
              'https://www.cabletv.com/feed',
              'https://ctv-clearlink.github.io/RSS-Feed/feed.xml'
          )
          
          # Write to file
          with open('feed.xml', 'w', encoding='utf-8') as f:
              f.write(xml_string)
          
          print(f"\n✓ Feed created with {cdata_count} CDATA sections")
          print(f"✓ Added {thumbnail_count}/{len(items)} thumbnails")
          print(f"✓ Output size: {len(xml_string):,} bytes ({len(xml_string)/1024/1024:.2f} MB)")
          EOF
      
      - name: Verify feed
        run: |
          echo "Feed size:"
          ls -lh feed.xml
          echo ""
          echo "CDATA count:"
          grep -c "CDATA" feed.xml || echo "0"
          echo ""
          echo "Thumbnail count:"
          grep -c "media:thumbnail" feed.xml || echo "0"
          echo ""
          echo "Sample thumbnails:"
          grep "media:thumbnail" feed.xml | head -3
          
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet feed.xml || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push feed
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add feed.xml
          git commit -m "Update RSS feed $(date '+%Y-%m-%d %H:%M:%S')"
          git pull --rebase origin main
          git push origin main
